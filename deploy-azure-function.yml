name: deploy

concurrency:
  group: ${{ github.event_name }}

on:
  push:
    branches:
      - master
      - main
    paths-ignore:
      - .github/workflows/*
  pull_request:
    types:
      - opened
      - synchronize
      - closed
    branches:
      - master
      - main

permissions:
  id-token: write
  packages: write
  pull-requests: write
  contents: write

jobs:
  
  code_testing:
    uses: ptonini-actions/workflows/.github/workflows/tester--unit.yaml@main
    if: github.event.action != 'closed' && github.event.head_commit.author.name != 'github-actions[bot]' && vars.skip_testing != 'true'
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  code_linting:
    uses: ptonini-actions/workflows/.github/workflows/code-linter.yaml@main
    if: github.event_name == 'pull_request' && contains('opened synchronize', github.event.action) && vars.skip_linting != 'true'
  security_scan:
    uses: ptonini-actions/workflows/.github/workflows/action--trufflehog.yaml@main
    if: github.event_name == 'pull_request' && contains('opened synchronize', github.event.action)
  release_please:
    uses: ptonini-actions/workflows/.github/workflows/action--release-please.yaml@main
    if: github.event_name == 'push'

  deploy_to_staging:
    uses: ptonini-actions/workflows/.github/workflows/deploy-azure-function.yaml@main
    if: github.event_name == 'pull_request' && contains('opened synchronize', github.event.action) && vars.skip_staging != 'true'
    with:
      app_name: ${{ var.staging_function_app_name }}
      vault_sp_path: ${{ var.vault_azr_sp_dev_path }}
    secrets:
      OPENVPN_CONFIG: ${{ secrets.OPENVPN_CONFIG }}

  deploy_to_production:
    uses: ptonini-actions/workflows/.github/workflows/deploy-azure-function.yaml@main
    if: github.event_name == 'push' && contains(github.event.commits.*.author.name, 'github-actions[bot]')
    with:
      app_name: ${{ var.function_app_name }}
      vault_sp_path: ${{ var.vault_azr_sp_prd_path }}
    secrets:
      OPENVPN_CONFIG: ${{ secrets.OPENVPN_CONFIG }}