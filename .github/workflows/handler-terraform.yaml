name: terraform

on:
  workflow_call:
    inputs:
      action:
        description: ''
        required: true
        type: string
      plan_filename:
        description: ''
        required: false
        type: string
        default: plan
    secrets:
      OPENVPN_CONFIG:
        description: ''
        required: true
      OPENSTACK_CONFIG:
        description: ''
        required: false
      GH_TOKEN:
        description: ''
        required: true
      TFVARS:
        description: ''
        required: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - run: env | sort
      - run: cat ${GITHUB_EVENT_PATH}
      - uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ vars.terraform_version }}
      - uses: actions/checkout@v3

      # Connect to VPN ########################################################
      - uses: ptonini-actions/openvpn@v1
        with:
          openvpn_config: ${{ secrets.OPENVPN_CONFIG }}
          validation_addr: ${{ vars.ovpn_validation_addr }}

      # Login to cloud providers ##############################################
      - uses: ptonini-actions/cloud-login@v1
        with:
          vault_credentials: ${{ vars.vault_credentials }}
          aws_credentials: ${{ vars.aws_credentials }}
          azure_credentials: ${{ vars._credentials }}
          openstack_config: ${{ secrets.OPENSTACK_CONFIG }}

      # Initialize terraform ##################################################
      - run: terraform init -input=false
      - run: echo '${{ secrets.TFVARS }}' > terraform.tfvars.json

      # Create plan ###########################################################
      - if: inputs.action == 'plan'
        run: terraform plan -out=${{ inputs.plan_filename }} -no-color -input=false -detailed-exitcode
        id: plan
        continue-on-error: true

      # Generate resumed plan view ############################################
      - if: inputs.action == 'plan' && hashFiles(inputs.terraform_plan_filename)
        run: terraform show -no-color ${{ inputs.plan_filename }}
        id: show

      # Save outputs to step summary and pr comments ##########################
      - if: inputs.action == 'plan'
        run: echo '```${{ steps.show.outputs.stdout }}${{ steps.plan.outputs.stderr }}```' >> $GITHUB_STEP_SUMMARY
      - if: inputs.action == 'plan'
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: '```${{ steps.show.outputs.stdout }}${{ steps.plan.outputs.stderr }}```'
          comment_tag: plan_output

      # Upload plan to artifact and set labels ################################
      - if: inputs.action == 'plan' && steps.plan.outputs.exitcode == '2'
        uses: actions/upload-artifact@v3
        with:
          name: plan
          path: ${{ inputs.plan_filename }}
          retention-days: 1
      - if: inputs.action == 'plan' && steps.plan.outputs.exitcode == '2'
        uses: ptonini-actions/set-labels@v1
        with:
          overwrite: true
          github_token: ${{ secrets.GH_TOKEN }}
          labels: |
            plan_created
            plan_run_id: ${{ github.run_id }}

      # Break job if plan has failed ##########################################
      - if: inputs.action == 'plan' && steps.plan.outputs.exitcode == '1'
        run: exit 1

      # Fetch approved plan ###################################################
      - if: inputs.action == 'apply'
        uses: ptonini-actions/get-labels@v1
        with:
          labels: plan_run_id
      - if: inputs.action == 'apply'
        uses: dawidd6/action-download-artifact@v2
        with:
          name: plan
          run_id: ${{ env.PLANNED_RUN_ID }}
          github_token: ${{ secrets.GH_TOKEN }}

      # Apply plan ############################################################
      - if: inputs.action == 'apply'
        run: terraform apply -auto-approve -input=false ${{ inputs.plan_filename }}
        id: apply