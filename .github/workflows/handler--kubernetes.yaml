name: kubernetes_handler

on:
  workflow_call:
    inputs:
      action:
        description: ''
        required: false
        default: deploy helm
        type: string
      environment:
        description: ''
        required: false
        default: production
        type: string
      digest:
        description: ''
        required: false
        type: string
      ovpn_validation_addr:
        description: ''
        required: false
        default: ${{ vars.ovpn_validation_addr }}
        type: string
      vault_addr:
        description: ''
        required: false
        default: ${{ vars.vault_addr }}
        type: string
      vault_credentials:
        description: ''
        required: false
        default: ${{ vars.vault_credentials }}
        type: string
      aws_credentials:
        description: ''
        required: false
        default: ${{ vars.aws_credentials }}
        type: string
      aws_region:
        description: ''
        required: false
        default: ${{ vars.aws_region }}
        type: string
      azure_credentials:
        description: ''
        required: false
        default: ${{ vars.azure_credentials }}
        type: string
      azure_resource_group:
        description: ''
        required: false
        default: ${{ vars.azure_resource_group }}
        type: string
      kubernetes_cluster_name:
        description: ''
        required: false
        default: ${{ vars.kubernetes_cluster_name }}
        type: string
      kubeconfig_source:
        description: ''
        required: false
        default: ${{ vars.kubeconfig_source }}
        type: string
      container_registry:
        description: ''
        required: false
        default: ${{ vars.container_registry }}
        type: string
      manifest:
        description: ''
        required: false
        default: ${{ vars.manifest }}
        type: string
      release_please_manifest:
        description: ''
        required: false
        default: ${{ vars.release_please_manifest }}
        type: string
      staging_domain:
        description: ''
        required: false
        default: ${{ vars.staging_domain }}
        type: string
      helm_max_history:
        description: ''
        required: false
        default: 3
        type: number
    secrets:
      OPENVPN_CONFIG:
        description: ''
        required: false
      GH_READER_TOKEN:
        description: ''
        required: true
    outputs:
      staging_host:
        description: ''
        value: ${{ jobs.kubernetes-handler.outputs.staging_host }}

jobs:
  kubernetes-handler:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    env:
      VAULT_ADDR: ${{ inputs.vault_addr }}
    steps:
      - run: env | sort
      - run: cat ${GITHUB_EVENT_PATH}

      # Connect to VPN ########################################################
      - if: inputs.ovpn_validation_addr != ''
        uses: ptonini-actions/openvpn@v1
        with:
          openvpn_config: ${{ secrets.OPENVPN_CONFIG }}
          validation_addr: ${{ inputs.ovpn_validation_addr }}

      # Login to cloud providers ##############################################
      - uses: ptonini-actions/cloud-login@v1
        with:
          vault_credentials: ${{ inputs.vault_credentials }}
          aws_credentials: ${{ inputs.aws_credentials }}
          azure_credentials: ${{ inputs.azure_credentials }}

      # Generate kubeconfig file ##############################################
      - uses: ptonini-actions/get-kubeconfig@v1
        with:
          cluster_name: ${{ inputs.kubernetes_cluster_name }}
          kubeconfig_source: ${{ inputs.kubeconfig_source }}
          vault_addr: ${{ inputs.vault_addr }}
          aws_region: ${{ inputs.aws_region }}
          azure_resource_group: ${{ inputs.azure_resource_group }}

      # Generate helm release files ###########################################
      - if: contains(inputs.action, 'helm')
        uses: ptonini-actions/generate-helm-releases@v1
        id: releases
        with:
          environment: ${{ inputs.environment }}
          digest: ${{ inputs.digest }}
          container_registry: ${{ inputs.container_registry }}
          manifest: ${{ inputs.manifest }}
          release_please_manifest: ${{ inputs.release_please_manifest }}
          staging_domain: ${{ inputs.staging_domain }}
          github_token: ${{ secrets.GH_READER_TOKEN }}

      # Handle helm releases ##################################################
      - if: contains(inputs.action, 'helm')
        name: ${{ inputs.action }} chart ${{ github.event.repository.name }}
        run: |
          for RELEASE in ${{ steps.releases.outputs.releases }}; do
            source "${RELEASE}/parameters"
            if [[ "${{ inputs.action }}" =~ "deploy" ]]; then
              helm upgrade -i ${RELEASE_NAME} ${CHART} -n ${NAMESPACE} --values "${RELEASE}/values" --version ${CHART_VERSION} --repo ${REPOSITORY} --history-max ${{ inputs.helm_max_history }} ${EXTRA_ARGS} --debug
            else if [[ "${{ inputs.action }}" =~ "uninstall" ]]; then
              helm uninstall ${RELEASE_NAME} ${CHART} -n ${NAMESPACE}
            fi
          done

      # Delete namespace ######################################################
      - if: inputs.action == 'delete namespace'
        uses: ptonini-actions/get-labels@v1
        with:
          labels: namespace
      - if: inputs.action == 'delete namespace'
        name: delete staging namespace ${{ env.NAMESPACE }}
        run: |
          helm list --short --namespace ${NAMESPACE} | xargs -r helm uninstall --namespace ${NAMESPACE}
          kubectl delete all --all --namespace ${NAMESPACE}
          kubectl delete namespace ${NAMESPACE}

      - if: github.event_name == 'pull_request' && steps.releases.outputs.message != ''
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: ${{ steps.releases.outputs.message }}

    outputs:
      staging_host: ${{ steps.releases.outputs.staging_host }}
