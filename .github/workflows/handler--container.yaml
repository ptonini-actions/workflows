name: container handler

on:
  workflow_call:
    inputs:
      action:
        description: ''
        required: false
        default: build-push
        type: string
      repository:
        description: ''
        required: false
        default: ${{ github.event.repository.full_name }}
        type: string
      registry:
        description: ''
        required: false
        default: ${{ vars.container_registry }}
        type: string
      tags:
        description: ''
        required: true
        type: string
      source_tag:
        description: ''
        required: false
        type: string
      context:
        description: ''
        required: false
        default: .
        type: string
      release_please_manifest:
        description: ''
        required: false
        default: ${{ vars.release_please_manifest }}
        type: string
      cache_key_suffix:
        description: ''
        required: false
        default: buildx
        type: string
      cache_src:
        description: ''
        required: false
        default: /tmp/cache
        type: string
      cache_dest:
        description: ''
        required: false
        default: /tmp/cache_new
        type: string
    secrets:
      REGISTRY_USERNAME:
        description: ''
        required: false
      REGISTRY_PASSWORD:
        description: ''
        required: false
      BUILD_ARGUMENTS:
        description: ''
        required: false
    outputs:
      digest:
        description: ''
        value: ${{ jobs.handler.outputs.digest }}

env:
  TAGS: ''

jobs:
  handler:
    runs-on: ubuntu-latest

    steps:
      - run: env | sort
      - run: cat ${GITHUB_EVENT_PATH}
      - uses: docker/setup-buildx-action@v3
      - uses: actions/checkout@v4

      # Login to container registry ###########################################
      - uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry == '' && 'ghcr.io' || inputs.registry }}
          username: ${{ secrets.REGISTRY_USERNAME == '' && github.actor || secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD == '' && github.token || secrets.REGISTRY_PASSWORD }}

      # Build TAGS environment variable ######################################
      - name: build TAGS environment variable
        run: | 
          for T in ${{ inputs.tags }}; do TAGS+="${{ inputs.registry }}/${{ inputs.repository }}:${T/--MANIFEST-VERSION--/$(jq -r '."${{ inputs.context }}"' < ${{ inputs.release_please_manifest }})},"; done
          echo "TAGS=${TAGS}" >> ${GITHUB_ENV}

      # Build/push container image ############################################
      - if: inputs.action == 'build-push'
        uses: actions/cache@v4
        with:
          path: ${{ inputs.cache_src }}
          key: ${{ inputs.repository }}-${{ inputs.cache_key_suffix }}
      - if: inputs.action == 'build-push'
        uses: docker/build-push-action@v6
        id: build-push
        with:
          push: true
          tags: ${{ env.TAGS }}
          cache-from: type=local,src=${{ inputs.cache_src }}
          cache-to: type=local,mode=max,dest=${{ inputs.cache_dest }}
          build-args: ${{ secrets.BUILD_ARGUMENTS }}
          context: ${{ inputs.context }}
      - if: inputs.action == 'build-push'
        name: update cache
        run: rm -rf ${{ inputs.cache_src }} || true && mv ${{ inputs.cache_dest }} ${{ inputs.cache_src }}
      - if: inputs.action == 'build-push' && github.event_name == 'pull_request'
        uses: ptonini-actions/set-labels@v1
        with:
          labels: published

      # Re-tag container image ################################################
      - if: inputs.action == 'retag'
        name: retag image
        run: | 
          export IFS=,
          for T in ${TAGS}; do docker buildx imagetools create ${{ inputs.registry }}/${{ inputs.repository }}:${{ inputs.source_tag }} --tag ${T};  done
    outputs:
      digest: ${{ steps.build-push.outputs.digest }}