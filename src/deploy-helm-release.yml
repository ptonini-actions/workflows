name: deploy helm release

concurrency:
  group: ${{ github.event_name }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
      - main
    paths-ignore:
      - manifest.yaml
      - .github/workflows/*
  pull_request:
    types:
      - opened
      - synchronize
      - closed
    branches:
      - master
      - main
    paths-ignore:
      - manifest.yaml
      - .github/workflows/*

permissions:
  id-token: write
  packages: write
  pull-requests: write
  contents: write

jobs:

  # Code verification #########################################################
  test:
    uses: ptonini-actions/workflows/.github/workflows/tester--unit.yaml@main
    if: contains('push pull-request', github.event_name) && github.event.action != 'closed' && github.event.head_commit.author.name != 'github-actions[bot]' && !vars.skip_testing
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  lint:
    uses: ptonini-actions/workflows/.github/workflows/linter.yaml@main
    if: github.event_name == 'pull_request' && contains('opened synchronize', github.event.action) && !vars.skip_linting
  security-scan:
    uses: ptonini-actions/workflows/.github/workflows/action--trufflehog.yaml@main
    if: github.event_name == 'pull_request' && contains('opened synchronize', github.event.action)
  release-please:
    uses: ptonini-actions/workflows/.github/workflows/action--release-please.yaml@main
    if: github.event_name == 'push'

  # Build and publish docker image ############################################
  publish-image:
    uses: ptonini-actions/workflows/.github/workflows/handler--container.yaml@main
    if: github.event_name == 'pull_request' && contains('opened synchronize', github.event.action)
    with:
      action: build-push
      tags: ${{ format('pr{0} pr{0}-{1}', github.event.number, github.run_number) }}
    secrets:
      BUILD_ARGUMENTS: |
        BUILD_USERNAME=${{ vars.gh_packages_user }}
        BUILD_PASSWORD=${{ secrets.GH_PACKAGES_TOKEN }}

  # Create staging environment ################################################
  deploy-to-staging:
    uses: ptonini-actions/workflows/.github/workflows/handler--kubernetes.yaml@main
    if: ${{ !vars.skip_staging }}
    needs:
      - publish-image
    with:
      action: deploy helm
      environment: staging
      digest: ${{ needs.publish_image.outputs.digest }}
    secrets:
      OPENVPN_CONFIG: ${{ secrets.OPENVPN_CONFIG }}
      GH_READER_TOKEN: ${{ secrets.GH_READER_TOKEN }}
      VAULT_CREDENTIALS: ${{ secrets.VAULT_CREDENTIALS }}
      AWS_CREDENTIALS: ${{ secrets.AWS_CREDENTIALS }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  performance-testing:
    uses: ptonini-actions/workflows/.github/workflows/tester--performance.yaml@main
    if: vars.performance_testing
    needs:
      - deploy-to-staging
    with:
      host: ${{ needs.deploy_to_staging.outputs.staging_host }}

  # Destroy staging environment ###############################################
  destroy-staging:
    uses: ptonini-actions/workflows/.github/workflows/handler--kubernetes.yaml@main
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && !vars.skip_staging
    with:
      action: destroy namespace
    secrets:
      OPENVPN_CONFIG: ${{ secrets.OPENVPN_CONFIG }}

  # Mark merged pr container image as approved ################################
  approve-image:
    uses: ptonini-actions/workflows/.github/workflows/handler--container.yaml@main
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged && contains(github.event.pull_request.labels.*.name, 'published')
    with:
      action: retag
      source_tag: ${{ format('pr{0}', github.event.number) }}
      tags: ${{ format('latest {0} pr{1}', vars.pr_approved_tag, github.event.number) }}

  # Set version tag to pr container image #####################################
  promote-image:
    uses: ptonini-actions/workflows/.github/workflows/handler--container.yaml@main
    if: "github.event_name == 'push' && contains(github.event.commits[0].author.name, 'github-actions[bot]') && contains(github.event.commits[0].message, 'chore(main): release')"
    with:
      action: retag
      source_tag: ${{ vars.pr_approved_tag }}
      tags: --MANIFEST-VERSION--

  # Deploy container image to production ######################################
  deploy-to-production:
    uses: ptonini-actions/workflows/.github/workflows/handler--kubernetes.yaml@main
    needs:
      - promote-image
    with:
      action: deploy helm
    secrets:
      OPENVPN_CONFIG: ${{ secrets.OPENVPN_CONFIG }}
      GH_READER_TOKEN: ${{ secrets.GH_READER_TOKEN }}
      VAULT_CREDENTIALS: ${{ secrets.VAULT_CREDENTIALS }}
      AWS_CREDENTIALS: ${{ secrets.AWS_CREDENTIALS }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}